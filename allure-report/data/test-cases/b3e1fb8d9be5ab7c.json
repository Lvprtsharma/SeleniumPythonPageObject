{"uid":"b3e1fb8d9be5ab7c","name":"test_selectCars[chrome-Skoda-Skoda Cars]","fullName":"test_CarWale.Test_CarWale#test_selectCars","historyId":"508e7f6e86421f4445b84946535b5181","time":{"start":1659512473205,"stop":1659512476804,"duration":3599},"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'encode'","statusTrace":"self = <TestCases.test_CarWale.Test_CarWale object at 0x00000178E8221390>\ncarBrand = 'Skoda', carTitle = 'Skoda Cars'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", dataprovider.get_data(\"NewCarsTest\"))\n    def test_selectCars(self, carBrand, carTitle):\n        log.logger.info(\"******* Inside Select Car Test ********\")\n        home = CarWale_HomePage(self.driver)\n        car = CarWaleBase(self.driver)\n        time.sleep(2)\n    \n        if carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n            title = car.getCarTitle()\n            print(\"Title of page is : \" + title).encode('utf8')\n            assert title == carTitle, \"Not on correct page as title is different\"\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print(\"Title of page is : \" + title).encode('utf8')\n            assert title == carTitle, \"Not on correct page as title is different\"\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n            title = car.getCarTitle()\n            print(\"Title of page is : \" + title).encode('utf8')\n            assert title == carTitle, \"Not on correct page as title is different\"\n        elif carBrand == \"Skoda\":\n            home.gotoNewCars().selectSkoda()\n            title = car.getCarTitle()\n>           print(\"Title of page is : \" + title).encode('utf8')\nE           AttributeError: 'NoneType' object has no attribute 'encode'\n\ntest_CarWale.py:49: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"get_browser","time":{"start":1659512468059,"stop":1659512473204,"duration":5145},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'NoneType' object has no attribute 'encode'","statusTrace":"self = <TestCases.test_CarWale.Test_CarWale object at 0x00000178E8221390>\ncarBrand = 'Skoda', carTitle = 'Skoda Cars'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\", dataprovider.get_data(\"NewCarsTest\"))\n    def test_selectCars(self, carBrand, carTitle):\n        log.logger.info(\"******* Inside Select Car Test ********\")\n        home = CarWale_HomePage(self.driver)\n        car = CarWaleBase(self.driver)\n        time.sleep(2)\n    \n        if carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n            title = car.getCarTitle()\n            print(\"Title of page is : \" + title).encode('utf8')\n            assert title == carTitle, \"Not on correct page as title is different\"\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print(\"Title of page is : \" + title).encode('utf8')\n            assert title == carTitle, \"Not on correct page as title is different\"\n        elif carBrand == \"Hyundai\":\n            home.gotoNewCars().selectHyundai()\n            title = car.getCarTitle()\n            print(\"Title of page is : \" + title).encode('utf8')\n            assert title == carTitle, \"Not on correct page as title is different\"\n        elif carBrand == \"Skoda\":\n            home.gotoNewCars().selectSkoda()\n            title = car.getCarTitle()\n>           print(\"Title of page is : \" + title).encode('utf8')\nE           AttributeError: 'NoneType' object has no attribute 'encode'\n\ntest_CarWale.py:49: AttributeError","steps":[],"attachments":[{"uid":"3b90e3e5d48173e2","name":"log","source":"3b90e3e5d48173e2.txt","type":"text/plain","size":320}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"get_browser::0","time":{"start":1659512477185,"stop":1659512479492,"duration":2307},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_CarWale"},{"name":"subSuite","value":"Test_CarWale"},{"name":"host","value":"LOVEPREET-LAPTOP"},{"name":"thread","value":"13936-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_CarWale"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carBrand","value":"'Skoda'"},{"name":"carTitle","value":"'Skoda Cars'"},{"name":"get_browser","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f8302eaadce84b50","status":"passed","time":{"start":1659511751437,"stop":1659511755209,"duration":3772}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"51a7098d2fc4473c","reportUrl":"http://localhost:8080/job/PageObjectModelPython/2/allure/#testresult/51a7098d2fc4473c","status":"passed","time":{"start":1659511751437,"stop":1659511755209,"duration":3772}}]},"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"b3e1fb8d9be5ab7c.json","parameterValues":["'Skoda'","'Skoda Cars'","'chrome'"]}